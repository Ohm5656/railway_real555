"""
Local Cloud Storage Server
‡∏™‡∏£‡πâ‡∏≤‡∏á local storage ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Firebase Cloud Storage
"""

import os
import shutil
import uuid
from datetime import datetime
from pathlib import Path
import json
from typing import Dict, List, Optional
import mimetypes

class LocalStorage:
    def __init__(self, storage_path: str = None, base_url: str = None):
        """
        Initialize Local Storage
        
        Args:
            storage_path: Path to storage directory
            base_url: Base URL for file access (e.g., https://file-server.up.railway.app)
        """
        # ---------------------------------------------------------------------
        # [Railway] ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å ENV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö deployment
        # ---------------------------------------------------------------------
        self.storage_path = Path(storage_path or os.environ.get("STORAGE_DIR", "/data/local_storage"))
        self.base_url = (base_url or os.environ.get("FILE_BASE_URL", "http://localhost:8001")).rstrip("/")

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå storage
        self.storage_path.mkdir(parents=True, exist_ok=True)
        (self.storage_path / "processed_images").mkdir(parents=True, exist_ok=True)
        (self.storage_path / "temp").mkdir(parents=True, exist_ok=True)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå metadata
        self.metadata_file = self.storage_path / "metadata.json"
        self.metadata = self._load_metadata()
    
    def _load_metadata(self) -> Dict:
        """‡πÇ‡∏´‡∏•‡∏î metadata ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        if self.metadata_file.exists():
            try:
                with open(self.metadata_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return {}
        return {}
    
    def _save_metadata(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å metadata ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        with open(self.metadata_file, 'w', encoding='utf-8') as f:
            json.dump(self.metadata, f, indent=2, ensure_ascii=False)
    
    def upload_file(self, file_path: str, destination_name: Optional[str] = None) -> Dict:
        """
        ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á local storage
        
        Args:
            file_path: Path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
            destination_name: ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô storage (optional)
        
        Returns:
            Dict ‡∏ó‡∏µ‡πà‡∏°‡∏µ download_url, file_id, size, created_at
        """
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {file_path}")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
        if not destination_name:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            base_name = os.path.splitext(os.path.basename(file_path))[0]
            ext = os.path.splitext(file_path)[1]
            destination_name = f"processed_images/{base_name}_{timestamp}{ext}"
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á file_id
        file_id = str(uuid.uuid4())
        
        # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á storage
        dest_path = self.storage_path / destination_name
        dest_path.parent.mkdir(parents=True, exist_ok=True)
        shutil.copy2(file_path, dest_path)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á download URL
        download_url = f"{self.base_url}/files/{file_id}"
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å metadata
        file_info = {
            "file_id": file_id,
            "original_name": os.path.basename(file_path),
            "storage_path": str(destination_name),
            "download_url": download_url,
            "size": os.path.getsize(file_path),
            "mime_type": mimetypes.guess_type(file_path)[0] or "application/octet-stream",
            "created_at": datetime.now().isoformat(),
            "public": True
        }
        
        self.metadata[file_id] = file_info
        self._save_metadata()
        
        return {
            "download_url": download_url,
            "file_id": file_id,
            "size": file_info["size"],
            "created_at": file_info["created_at"]
        }
    
    def get_file_info(self, file_id: str) -> Optional[Dict]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å file_id"""
        # ‡πÇ‡∏´‡∏•‡∏î metadata ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        self.metadata = self._load_metadata()
        return self.metadata.get(file_id)
    
    def list_files(self, prefix: str = "") -> List[Dict]:
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        # ‡πÇ‡∏´‡∏•‡∏î metadata ‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
        self.metadata = self._load_metadata()
        
        files = []
        for file_id, info in self.metadata.items():
            if prefix and not info["storage_path"].startswith(prefix):
                continue
            files.append({
                "file_id": file_id,
                "name": info["original_name"],
                "path": info["storage_path"],
                "download_url": info["download_url"],
                "size": info["size"],
                "created_at": info["created_at"]
            })
        return files
    
    def delete_file(self, file_id: str) -> bool:
        """‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å storage"""
        if file_id not in self.metadata:
            return False
        
        file_info = self.metadata[file_id]
        file_path = self.storage_path / file_info["storage_path"]
        
        try:
            if file_path.exists():
                file_path.unlink()
            del self.metadata[file_id]
            self._save_metadata()
            return True
        except Exception as e:
            print(f"Error deleting file: {e}")
            return False
    
    def get_file_path(self, file_id: str) -> Optional[str]:
        """‡∏î‡∏∂‡∏á path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å file_id"""
        # ‡πÇ‡∏´‡∏•‡∏î metadata ‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
        self.metadata = self._load_metadata()
        
        if file_id in self.metadata:
            return str(self.storage_path / self.metadata[file_id]["storage_path"])
        return None
    
    def cleanup_temp_files(self, max_age_hours: int = 24):
        """‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"""
        temp_dir = self.storage_path / "temp"
        if not temp_dir.exists():
            return
        
        current_time = datetime.now()
        for file_path in temp_dir.iterdir():
            if file_path.is_file():
                file_age = current_time - datetime.fromtimestamp(file_path.stat().st_mtime)
                if file_age.total_seconds() > max_age_hours * 3600:
                    try:
                        file_path.unlink()
                        print(f"Deleted temp file: {file_path}")
                    except Exception as e:
                        print(f"Error deleting temp file {file_path}: {e}")

# -----------------------------------------------------------------------------
# [Railway] ‡∏•‡∏ö‡∏Å‡∏≤‡∏£ import/‡∏û‡∏∂‡πà‡∏á‡∏û‡∏≤ Ngrok_newChange ‡∏≠‡∏≠‡∏Å ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏á helper ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ
# -----------------------------------------------------------------------------
# ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å ENV (FILE_BASE_URL, STORAGE_DIR) ‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á LocalStorage ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
local_storage = LocalStorage()  # [Railway]

def upload_to_local_storage(file_path: str, file_name: Optional[str] = None) -> tuple:
    """
    ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á local storage
    
    Returns:
        tuple: (download_url, file_id)
    """
    result = local_storage.upload_file(file_path, file_name)
    return result["download_url"], result["file_id"]

def delete_from_local_storage(file_id: str) -> bool:
    """‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å local storage"""
    return local_storage.delete_file(file_id)

def get_local_storage_info(file_id: str) -> Optional[Dict]:
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å local storage"""
    return local_storage.get_file_info(file_id)

# Test function (‡∏£‡∏±‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ï‡∏£‡∏á ‡πÜ)
if __name__ == "__main__":
    test_file = "output_images/result_563000013844406-_2_.jpg"
    if os.path.exists(test_file):
        download_url, file_id = upload_to_local_storage(test_file)
        print(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        print(f"üì• Download URL: {download_url}")
        print(f"üÜî File ID: {file_id}")
        
        files = local_storage.list_files()
        print(f"\nüìÅ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô Local Storage ({len(files)} ‡πÑ‡∏ü‡∏•‡πå):")
        for file_info in files:
            print(f"  üìÑ {file_info['name']} ({file_info['size']} bytes)")
            print(f"     üîó {file_info['download_url']}")
    else:
        print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {test_file}")
